- const getTagName = (property) => `data[${property}]`
- const getTagId = (property) => `data_${property}`
//- - const getTableName = ({constructor}) => constructor.name 

mixin formFor(entity = null)
  div.col-12.col-lg-4.mx-auto  
    form&attributes(attributes)
      block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getTagId(propertyName)
  - const {viewName} = entity.constructor
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`views.${viewName}.${propertyName}`)
    input(
      id= inputId
      name=getTagName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, {options, textField}, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - selectId = getTagId(propertyName)
  - const {viewName} = entity.constructor
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= selectId
    )= t(`views.${viewName}.${propertyName}`)
    select(
      id= selectId
      name=getTagName(propertyName)
      class=classLine
      )
      option() 
      each elem in options
        option(value=elem.id)= elem[textField] 



mixin submit(form = null)
  input(class='btn btn-success' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form.mb-0(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
